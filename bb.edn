{:min-bb-version "0.8.0"
 :pods {;since babashka 0.8.0, can only be declared in bb.edn
        org.babashka/tools-deps-native {:version "0.0.5"}
        clj-kondo/clj-kondo {:version "2022.10.05"}}
 :deps {datahike/bb {:local/root "bb"}}
 :tasks {:requires [[clojure.edn :as edn]
                    [pod.borkdude.clj-kondo :as clj-kondo]
                    [tools.build :as build]
                    [tools.cljdoc :as cljdoc]
                    [tools.deploy :as deploy]
                    [tools.release :as release]
                    [tools.test :as test]
                    [tools.version :as version]]
         :init (do (def config-file "config.edn")
                   (def config (edn/read-string (slurp config-file)))
                   (def deps (edn/read-string (slurp "deps.edn"))))
         
         ; tools
         
         bench {:doc "Run benchmarks"
                :task (clojure "-M:benchmark" "measure")} 
         
         docs {:doc "Get a preview on the clojure docs"
               :depends [jar install]
               :task (cljdoc/preview config)}
         
         ffix {:doc "Format source files" 
               :task (clojure "-M:ffix")}


         ; checks
         
         format {:doc "Test formatting"
                 :task (clojure "-M:format")}

         lint {:doc "Run clj-kondo linter"
               :require [[pod.borkdude.clj-kondo :as clj-kondo]]
               :task (clj-kondo/print! (clj-kondo/run! {:lint "."}))}

         test {:doc "Run all tests or restrict to 'native-image', 'back-compat' or a kaocha test id (see tests.edn)"
               :depends [compile]
               :task (apply test/-main config *command-line-args*)}

         kaocha {:doc "Run kaocha with arbitrary arguments"
                 :task (apply test/kaocha *command-line-args*)}
         
         outdated {:doc "Find outdated libraries"
                   :task (clojure "-M:outdated")}

         check {:doc "Run all checks"
                :depends [test format lint outdated]}
         

         ; build and release
         
         inc {:doc "Increment the project version: [major|minor] <version>" 
              :task (apply version/inc config-file *command-line-args*)}

         tag {:doc "Return current version as a tag"
              :task (println (version/as-tag config))}

         clean {:doc "Remove build files" 
                :task (build/clean config)}

         compile {:doc "Compile classes"
                  :depends [clean]
                  :task (build/compile config)}

         pom {:doc "Create pom file" 
              :depends [compile]
              :task (build/pom config)}

         jar {:doc "Build jar"
              :depends [pom]
              :task (build/jar config)}

         install {:doc "Install jar locally"
                  :task (deploy/local config)}

         clojars {:doc "Install jar to clojars"
                  :task (deploy/remote config)}

         release {:doc "Build and release jar to GitHub"
                  :depends [jar]
                  :task (release/gh-release config)}
         
         ;; native image
         
         ni-check {:doc "Check for 'native-image' program"
                  :task (try (shell "which" "native-image")
                          (println "Program native-image found!")
                          (catch Exception _
                            (println "PATH does not contain native-image! Make sure to add your GraalVM to it.")
                            (System/exit 1)))}
         
         ni-cli {:doc "Build native image cli"
                 :depends [compile ni-check] 
                 :task (clojure "-M:native-cli" "--no-fallback" "-J-Xmx4g")}
         
         ni-jar {:doc "Build native image library" 
                 :task (build/native-shared-library config)}}}
